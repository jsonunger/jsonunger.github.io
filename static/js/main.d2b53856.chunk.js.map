{"version":3,"sources":["Footer.tsx","components/PropertyComponent.tsx","components/PrimitiveComponent.tsx","components/ToggleComponent.tsx","components/ArrayComponent.tsx","components/ObjectComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","react_default","a","createElement","className","href","Component","PropertyComponent","_this$props","this","props","toggle","property","onClick","concat","PrimitiveComponent","checkIfUrl","value","test","checkIfEmail","getValue","_this","target","comma","val","components_PropertyComponent","ToggleComponent","show","ItemNames","_ref","names","length","join","ArrayComponent","state","setState","subComponents","itemNames","forEach","i","arr","comp","compProps","Array","isArray","Object","assign","title","keys","push","components_ObjectComponent","components_PrimitiveComponent","key","components_ToggleComponent","ArrayComponent_ItemNames","ObjectComponent","open","default","_this$props2","prop","components_ArrayComponent","objTitle","App","resume","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2b53856.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                <footer>\n                    <p>\n                        Made using <a href=\"https://facebook.github.io/create-react-app\">Create React App</a>. The repo\n                        is available on <a href=\"https://github.com/jsonunger/jsonunger.github.io\">GitHub</a>.\n                    </p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\ninterface IProps {\n    toggle?: () => void;\n    property: string;\n}\n\nclass PropertyComponent extends Component<IProps> {\n    render() {\n        const { toggle, property } = this.props;\n        return (\n            <span onClick={toggle} className={`${toggle ? 'clickable ' : ''}property`}>\n                {property}\n            </span>\n        );\n    }\n}\n\nexport default PropertyComponent;\n","import React, { Component } from 'react';\nimport { IComponentProps } from './sharedTypes';\nimport PropertyComponent from './PropertyComponent';\n\ntype Props = IComponentProps<string | number | boolean>;\nclass PrimitiveComponent extends Component<Props> {\n    checkIfUrl = (value: string) => {\n        return /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/i.test(\n            value,\n        );\n    };\n\n    checkIfEmail = (value: string) => {\n        return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i.test(\n            value,\n        );\n    };\n\n    getValue = (value: string | number | boolean) => {\n        if (typeof value === 'string') {\n            if (this.checkIfUrl(value)) {\n                return (\n                    <a href={value} target=\"_blank\">\n                        {value}\n                    </a>\n                );\n            }\n            if (this.checkIfEmail(value)) {\n                return (\n                    <a href={`mailto:${value}`} target=\"_blank\">\n                        {value}\n                    </a>\n                );\n            }\n        }\n        return value;\n    };\n\n    render() {\n        const { value, property, comma } = this.props;\n\n        const val = this.getValue(value);\n        return (\n            <div>\n                {property ? <PropertyComponent property={property} /> : null}\n                {property ? ':' : null} <span className={typeof value}>\"{val}\"</span>\n                {comma ? ',' : null}\n            </div>\n        );\n    }\n}\n\nexport default PrimitiveComponent;\n","import React, { Component } from 'react';\n\ninterface IProps {\n    toggle: () => void;\n    show: boolean;\n}\n\nclass ToggleComponent extends Component<IProps> {\n    render() {\n        const { toggle, show } = this.props;\n        return (\n            <div className=\"toggle clickable\" onClick={toggle}>\n                <strong>{show ? '+' : '-'}</strong>\n            </div>\n        );\n    }\n}\n\nexport default ToggleComponent;\n","import React, { Component, SFC } from 'react';\nimport { IComponentProps } from './sharedTypes';\nimport ObjectComponent from './ObjectComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\n\ninterface IItemNamesProps {\n    names: string[];\n    toggle: () => void;\n}\nconst ItemNames: SFC<IItemNamesProps> = ({ names, toggle }) => (\n    <em className=\"clickable\" onClick={toggle}>\n        {names.length ? names.join(', ') : '...'}\n    </em>\n);\n\ntype Props = IComponentProps<any[]>;\ninterface IState {\n    show: boolean;\n}\n\nclass ArrayComponent extends Component<Props, IState> {\n    state: IState = {\n        show: false,\n    };\n\n    toggle = () => {\n        this.setState(state => ({\n            show: !state.show,\n        }));\n    };\n\n    render() {\n        const { value, property, comma } = this.props;\n        let subComponents: JSX.Element[] = [];\n        let itemNames: string[] = [];\n        value.forEach((val, i, arr) => {\n            let compProps = { value: val },\n                comp;\n            if (Array.isArray(val)) {\n                comp = <ArrayComponent {...compProps} comma={i !== arr.length - 1} />;\n            } else if (typeof val === 'object') {\n                let title = val[Object.keys(val)[0]];\n                itemNames.push(title);\n                comp = <ObjectComponent {...compProps} comma={i !== arr.length - 1} title={title} />;\n            } else {\n                comp = <PrimitiveComponent {...compProps} comma={i !== arr.length - 1} />;\n            }\n            subComponents.push(<li key={i}>{comp}</li>);\n        });\n\n        return (\n            <div>\n                {property ? <PropertyComponent toggle={this.toggle} property={property} /> : null}\n                {property ? ':' : null}\n                <ToggleComponent show={!this.state.show} toggle={this.toggle} /> {'\\u005b'}{' '}\n                {this.state.show ? (\n                    <ul className=\"array collapsible\">{subComponents}</ul>\n                ) : (\n                    <ItemNames names={itemNames} toggle={this.toggle} />\n                )}{' '}\n                {'\\u005d'}\n                {comma ? ',' : null}\n            </div>\n        );\n    }\n}\n\nexport default ArrayComponent;\n","import React, { Component } from 'react';\nimport ArrayComponent from './ArrayComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport { IComponentProps } from './sharedTypes';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\n\ninterface IProps extends IComponentProps<Record<string, any>> {\n    open?: boolean;\n    title?: string;\n}\ninterface IState {\n    show: boolean;\n}\n\nclass ObjectComponent extends Component<IProps, IState> {\n    state: IState = {\n        show: false,\n    };\n\n    toggle = () => {\n        this.setState(state => ({\n            show: !state.show,\n        }));\n    };\n\n    componentWillMount() {\n        const { open, property } = this.props;\n        if (open || property === 'about') this.setState({ show: true });\n    }\n\n    render() {\n        let subComponents: JSX.Element[] = [];\n        if (this.props.value.default) delete this.props.value.default;\n        const { value, property, title, comma } = this.props;\n        Object.keys(value).forEach((prop, i, arr) => {\n            let val = value[prop],\n                comp;\n            if (Array.isArray(val)) {\n                comp = <ArrayComponent value={val as any[]} property={prop} comma={i !== arr.length - 1} />;\n            } else if (typeof val === 'object') {\n                let objTitle = val[Object.keys(val)[0]];\n                comp = (\n                    <ObjectComponent\n                        value={val as IProps['value']}\n                        property={prop}\n                        comma={i !== arr.length - 1}\n                        title={objTitle}\n                    />\n                );\n            } else {\n                comp = <PrimitiveComponent value={val} property={prop} comma={i !== arr.length - 1} />;\n            }\n            subComponents.push(<li key={i}>{comp}</li>);\n        });\n\n        return (\n            <div>\n                {property ? <PropertyComponent toggle={this.toggle} property={property} /> : null}\n                {property ? ':' : null}\n                <ToggleComponent show={!this.state.show} toggle={this.toggle} /> {'\\u007b'}{' '}\n                {this.state.show ? (\n                    <ul className=\"obj collapsible\">{subComponents}</ul>\n                ) : (\n                    <em className=\"clickable\" onClick={this.toggle}>\n                        {title}\n                    </em>\n                )}{' '}\n                {'\\u007d'}\n                {comma ? ',' : null}\n            </div>\n        );\n    }\n}\n\nexport default ObjectComponent;\n","import React, { Component } from 'react';\nimport Footer from './Footer';\nimport ObjectComponent from './components/ObjectComponent';\n\nimport resume from './resume.json';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"margins\">\n                    <ObjectComponent value={resume} open={true} />\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface IConfig {\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import 'react-app-polyfill/ie9';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}