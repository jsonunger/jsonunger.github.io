{"version":3,"sources":["components/List.tsx","components/ListItem.tsx","components/Italic.tsx","components/Link.tsx","Footer.tsx","PropertyComponent.tsx","getTypeOf.ts","PrimitiveComponent.tsx","ToggleComponent.tsx","hoc/withToggle.ts","ArrayComponent.tsx","ObjectComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["List","styled","ul","_templateObject","ListItem","li","ListItem_templateObject","Italic","em","Italic_templateObject","props","onClick","css","_templateObject2","Link","react_default","a","createElement","Object","assign","target","FooterWrapper","div","Footer_templateObject","FooterContent","footer","Footer_templateObject2","FooterText","p","_templateObject3","Footer","components_Link","href","PropertyComponentWrapper","span","PropertyComponent_templateObject","PropertyComponent_templateObject2","PropertyComponent","_ref","property","objectWithoutProperties","getTypeOf","obj","toString","call","split","slice","toLowerCase","colorMap","string","number","boolean","null","Value","PrimitiveComponent_templateObject","PrimitiveComponent_templateObject2","value","getValue","node","test","checkIfUrl","checkIfEmail","concat","PrimitiveComponent","withProps","objectSpread","val","withVal","comma","src_PropertyComponent","ToggleComponentWrapper","ToggleComponent_templateObject","ToggleComponent","showExpandIcon","withToggle","compose","withState","withHandlers","show","toggleIsShowing","_e","hide","_ref2","toggle","_ref3","state","ArrayComponent","isShowing","subComponents","itemNames","forEach","i","arr","comp","compProps","Array","isArray","length","title","keys","push","src_ObjectComponent","src_PrimitiveComponent","components_ListItem","key","src_ToggleComponent","components_List","components_Italic","join","ObjectComponent","lifecycle","componentWillMount","_this$props","this","open","prop","valType","src_ArrayComponent","objTitle","ResumeWrapper","App_templateObject","App","className","resume","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56365bde.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n    list-style-type: none;\n    padding: 0px;\n    margin: 0px 0px 0px 24px;\n    margin-left: 1.5em;\n\n    @media (min-width: 768px) {\n        margin-left: 2em;\n    }\n`;\n\nexport default List;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ListItem = styled.li`\n    position: relative;\n`;\n\nexport default ListItem;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Italic = styled.em`\n    ${props =>\n        props.onClick &&\n        css`\n            cursor: pointer;\n        `}\n`;\n\nexport default Italic;\n","import React from 'react';\n\nconst Link: React.SFC<React.HTMLProps<HTMLAnchorElement>> = props => <a target=\"_blank\" {...props} />;\n\nexport default Link;\n","import React, { SFC } from 'react';\nimport styled from 'styled-components';\nimport { Link } from './components';\n\nconst FooterWrapper = styled.div`\n    background-color: white;\n    opacity: 0.95;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n    text-align: center;\n    font-size: 12px;\n`;\n\nconst FooterContent = styled.footer`\n    padding: 8px;\n`;\n\nconst FooterText = styled.p`\n    margin-bottom: 0;\n`;\n\nconst Footer: SFC = () => (\n    <FooterWrapper>\n        <FooterContent>\n            <FooterText>\n                Made using <Link href=\"https://facebook.github.io/create-react-app\">Create React App</Link>. The repo is\n                available on <Link href=\"https://github.com/jsonunger/jsonunger.github.io\">GitHub</Link>. View my resume\n                on <Link href=\"http://bit.ly/jsonunger-resume\">Dropbox</Link>.\n            </FooterText>\n        </FooterContent>\n    </FooterWrapper>\n);\n\nexport default Footer;\n","import React, { SFC } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst PropertyComponentWrapper = styled.span`\n    font-weight: bold;\n\n    ${props =>\n        props.onClick &&\n        css`\n            cursor: pointer;\n        `}\n`;\n\ninterface IProps extends Pick<React.HTMLProps<HTMLSpanElement>, 'onClick'> {\n    property: string;\n}\n\nconst PropertyComponent: SFC<IProps> = ({ property, ...props }) => (\n    <PropertyComponentWrapper {...props}>{property}</PropertyComponentWrapper>\n);\n\nexport default PropertyComponent;\n","const getTypeOf = (obj: string | number | boolean | null) => {\n    return {}.toString\n        .call(obj)\n        .split(' ')[1]\n        .slice(0, -1)\n        .toLowerCase();\n};\n\nexport default getTypeOf;\n","import React, { SFC } from 'react';\nimport { IComponentProps } from './types';\nimport PropertyComponent from './PropertyComponent';\nimport styled, { css } from 'styled-components';\nimport getTypeOf from './getTypeOf';\nimport { Link } from './components';\nimport { withProps } from 'recompose';\n\nconst colorMap: Record<string, string> = {\n    string: 'green',\n    number: 'blue',\n    boolean: 'firebrick',\n    null: 'gray',\n};\nconst Value = styled.span<{ value: PossibleValueTypes }>`\n    ${props => css`\n        color: ${colorMap[getTypeOf(props.value)]};\n    `}\n`;\n\nconst checkIfUrl = (value: string) => {\n    return /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/i.test(\n        value,\n    );\n};\nconst checkIfEmail = (value: string) => {\n    return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i.test(\n        value,\n    );\n};\nconst getValue = (value: PossibleValueTypes) => {\n    if (typeof value === 'string') {\n        let node: React.ReactNode;\n        if (checkIfUrl(value)) {\n            node = <Link href={value}>{value}</Link>;\n        } else if (checkIfEmail(value)) {\n            node = <Link href={`mailto:${value}`}>{value}</Link>;\n        } else {\n            node = value;\n        }\n        return <span>\"{node}\"</span>;\n    }\n    if (value === null) {\n        return 'null';\n    }\n    return value;\n};\n\ntype PossibleValueTypes = string | number | boolean | null;\ntype Props = IComponentProps<PossibleValueTypes>;\n\ninterface IWithVal {\n    val: React.ReactNode;\n}\nconst withVal = withProps<Props & IWithVal, Props>(props => ({\n    ...props,\n    val: getValue(props.value),\n}));\n\nconst PrimitiveComponentClass: SFC<Props & IWithVal> = ({ value, property, comma, val }) => (\n    <span>\n        {property ? <PropertyComponent property={property} /> : null}\n        {property ? ':' : null} <Value value={value}>{val}</Value>\n        {comma ? ',' : null}\n    </span>\n);\n\nconst PrimitiveComponent = withVal(PrimitiveComponentClass);\nexport default PrimitiveComponent;\n","import React, { SFC } from 'react';\nimport styled from 'styled-components';\n\nconst ToggleComponentWrapper = styled.div`\n    padding-right: 8px;\n    padding-left: 8px;\n    position: absolute;\n    top: 1px;\n    left: -1.5em;\n    cursor: pointer;\n    user-select: none;\n    -webkit-user-select: none;\n`;\n\ninterface IProps {\n    showExpandIcon: boolean;\n    onClick: React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst ToggleComponent: SFC<IProps> = ({ showExpandIcon, ...props }) => (\n    <ToggleComponentWrapper {...props}>\n        <strong>{showExpandIcon ? '+' : '-'}</strong>\n    </ToggleComponentWrapper>\n);\n\nexport default ToggleComponent;\n","import { withState, compose, withHandlers } from 'recompose';\nimport { Omit } from '../types';\n\ninterface IWithState {\n    isShowing: boolean;\n    toggleIsShowing: (state: boolean | ((innerState: boolean) => boolean)) => boolean;\n}\n\ninterface IWithHandlers {\n    show: (e?: React.MouseEvent<HTMLElement>) => boolean;\n    hide: (e?: React.MouseEvent<HTMLElement>) => boolean;\n    toggle: (e?: React.MouseEvent<HTMLElement>) => boolean;\n}\n\nexport type WithToggleProps = Omit<IWithState, 'toggleIsShowing'> & IWithHandlers;\n\nexport const withToggle = <T extends WithToggleProps>() =>\n    compose<T, Omit<T, keyof WithToggleProps>>(\n        withState('isShowing', 'toggleIsShowing', false),\n        withHandlers<IWithState, IWithHandlers>({\n            show: ({ toggleIsShowing }) => (_e?: React.MouseEvent<HTMLElement>) => toggleIsShowing(true),\n            hide: ({ toggleIsShowing }) => (_e?: React.MouseEvent<HTMLElement>) => toggleIsShowing(false),\n            toggle: ({ toggleIsShowing }) => (_e?: React.MouseEvent<HTMLElement>) => toggleIsShowing(state => !state),\n        }),\n    );\n","import React, { SFC } from 'react';\nimport { IComponentProps } from './types';\nimport ObjectComponent from './ObjectComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\nimport { List, ListItem, Italic } from './components';\nimport { withToggle, WithToggleProps } from './hoc/withToggle';\n\ntype Props = IComponentProps<any[]> & WithToggleProps;\n\nconst ArrayComponentClass: SFC<Props> = ({ value, property, comma, toggle, isShowing }) => {\n    let subComponents: JSX.Element[] = [];\n    let itemNames: string[] = [];\n    value.forEach((val, i, arr) => {\n        let compProps = { value: val },\n            comp;\n        if (Array.isArray(val)) {\n            comp = <ArrayComponent {...compProps} comma={i !== arr.length - 1} />;\n        } else if (typeof val === 'object') {\n            let title = val[Object.keys(val)[0]];\n            itemNames.push(title);\n            comp = <ObjectComponent {...compProps} comma={i !== arr.length - 1} title={title} />;\n        } else {\n            comp = <PrimitiveComponent {...compProps} comma={i !== arr.length - 1} />;\n        }\n        subComponents.push(<ListItem key={i}>{comp}</ListItem>);\n    });\n\n    return (\n        <div>\n            {property ? <PropertyComponent onClick={toggle} property={property} /> : null}\n            {property ? ':' : null}\n            <ToggleComponent showExpandIcon={!isShowing} onClick={toggle} /> {'\\u005b'}{' '}\n            {isShowing ? (\n                <List>{subComponents}</List>\n            ) : (\n                <Italic onClick={toggle}>{itemNames.length ? itemNames.join(', ') : '...'}</Italic>\n            )}{' '}\n            {'\\u005d'}\n            {comma ? ',' : null}\n        </div>\n    );\n};\n\nconst ArrayComponent = withToggle<Props>()(ArrayComponentClass);\nexport default ArrayComponent;\n","import React, { SFC } from 'react';\nimport ArrayComponent from './ArrayComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport { IComponentProps } from './types';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\nimport { List, ListItem, Italic } from './components';\nimport getTypeOf from './getTypeOf';\nimport { WithToggleProps, withToggle } from './hoc/withToggle';\nimport { compose, lifecycle } from 'recompose';\n\ninterface IProps extends IComponentProps<Record<string, any>> {\n    open?: boolean;\n    title?: string;\n}\n\nconst ObjectComponentClass: SFC<IProps & WithToggleProps> = ({ value, property, title, comma, toggle, isShowing }) => {\n    let subComponents: JSX.Element[] = [];\n    Object.keys(value).forEach((prop, i, arr) => {\n        let val = value[prop];\n        let valType = getTypeOf(val);\n        let comp;\n        if (valType === 'array') {\n            comp = <ArrayComponent value={val as any[]} property={prop} comma={i !== arr.length - 1} />;\n        } else if (valType === 'object') {\n            let objTitle = val[Object.keys(val)[0]];\n            comp = (\n                <ObjectComponent\n                    value={val as IProps['value']}\n                    property={prop}\n                    comma={i !== arr.length - 1}\n                    title={objTitle}\n                />\n            );\n        } else {\n            comp = <PrimitiveComponent value={val} property={prop} comma={i !== arr.length - 1} />;\n        }\n        subComponents.push(<ListItem key={i}>{comp}</ListItem>);\n    });\n\n    return (\n        <div>\n            {property ? <PropertyComponent onClick={toggle} property={property} /> : null}\n            {property ? ':' : null}\n            <ToggleComponent showExpandIcon={!isShowing} onClick={toggle} /> {'\\u007b'}{' '}\n            {isShowing ? <List>{subComponents}</List> : <Italic onClick={toggle}>{title}</Italic>} {'\\u007d'}\n            {comma ? ',' : null}\n        </div>\n    );\n};\n\nconst ObjectComponent = compose<IProps & WithToggleProps, IProps>(\n    withToggle<IProps & WithToggleProps>(),\n    lifecycle<IProps & WithToggleProps, {}>({\n        componentWillMount() {\n            const { open, property, show } = this.props;\n            if (open || property === 'about') show();\n        },\n    }),\n)(ObjectComponentClass);\n\nexport default ObjectComponent;\n","import React, { SFC } from 'react';\nimport styled from 'styled-components';\n\nimport Footer from './Footer';\nimport ObjectComponent from './ObjectComponent';\n\nimport resume from './resume.json';\n\nconst ResumeWrapper = styled.div`\n    margin: 8px;\n\n    @media (max-width: 767px) {\n        margin-right: 12px;\n    }\n`;\n\nconst App: SFC = () => (\n    <div className=\"row\">\n        <ResumeWrapper>\n            <ObjectComponent value={resume} open={true} title=\"Jason's JSON Resume\" />\n        </ResumeWrapper>\n        <Footer />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface IConfig {\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import 'react-app-polyfill/ie9';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}