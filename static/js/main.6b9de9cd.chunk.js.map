{"version":3,"sources":["components/List.tsx","components/ListItem.tsx","components/Italic.tsx","components/Link.tsx","Footer.tsx","PropertyComponent.tsx","getTypeOf.ts","PrimitiveComponent.tsx","ToggleComponent.tsx","ArrayComponent.tsx","ObjectComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["List","styled","ul","_templateObject","ListItem","li","ListItem_templateObject","Italic","em","Italic_templateObject","props","onClick","css","_templateObject2","Link","react_default","a","createElement","Object","assign","target","FooterWrapper","div","Footer_templateObject","FooterContent","footer","Footer_templateObject2","FooterText","p","_templateObject3","Footer","components_Link","href","Component","PropertyComponentWrapper","span","PropertyComponent_templateObject","PropertyComponent_templateObject2","PropertyComponent","_this$props","this","property","objectWithoutProperties","getTypeOf","obj","toString","call","split","slice","toLowerCase","colorMap","string","number","boolean","null","Value","PrimitiveComponent_templateObject","PrimitiveComponent_templateObject2","value","PrimitiveComponent","checkIfUrl","test","checkIfEmail","getValue","node","_this","concat","comma","val","src_PropertyComponent","ToggleComponentWrapper","ToggleComponent_templateObject","ToggleComponent","showExpandIcon","ArrayComponent","state","show","toggle","setState","subComponents","itemNames","forEach","i","arr","comp","compProps","Array","isArray","length","title","keys","push","src_ObjectComponent","src_PrimitiveComponent","components_ListItem","key","src_ToggleComponent","components_List","components_Italic","join","ObjectComponent","open","_this$props2","prop","valType","src_ArrayComponent","objTitle","ResumeWrapper","App_templateObject","App","className","resume","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sdAGA,IAWeA,EAXFC,IAAOC,GAAVC,qGCAV,IAIeC,EAJEH,IAAOI,GAAVC,kMCAd,IAQeC,EARAN,IAAOO,GAAVC,IACN,SAAAC,GAAK,OACHA,EAAMC,SACNC,YADAC,OCDOC,EAF6C,SAAAJ,GAAK,OAAIK,EAAAC,EAAAC,cAAA,IAAAC,OAAAC,OAAA,CAAGC,OAAO,UAAaV,6ZCE5F,IAAMW,EAAgBpB,IAAOqB,IAAVC,KAUbC,EAAgBvB,IAAOwB,OAAVC,KAIbC,EAAa1B,IAAO2B,EAAVC,KAoBDC,mLAdP,OACIf,EAAAC,EAAAC,cAACI,EAAD,KACIN,EAAAC,EAAAC,cAACO,EAAD,KACIT,EAAAC,EAAAC,cAACU,EAAD,mBACeZ,EAAAC,EAAAC,cAACc,EAAD,CAAMC,KAAK,+CAAX,oBADf,8BAEyBjB,EAAAC,EAAAC,cAACc,EAAD,CAAMC,KAAK,oDAAX,UAFzB,uBAGwBjB,EAAAC,EAAAC,cAACc,EAAD,CAAMC,KAAK,kCAAX,WAHxB,cALCC,4OCnBrB,IAAMC,EAA2BjC,IAAOkC,KAAVC,IAGxB,SAAA1B,GAAK,OACHA,EAAMC,SACNC,YADAyB,OAiBOC,mLANF,IAAAC,EAC0BC,KAAK9B,MAA5B+B,EADHF,EACGE,SAAa/B,EADhBQ,OAAAwB,EAAA,EAAAxB,CAAAqB,EAAA,cAEL,OAAOxB,EAAAC,EAAAC,cAACiB,EAA6BxB,EAAQ+B,UAHrBR,aCTjBU,EARG,SAACC,GACf,MAAO,GAAGC,SACLC,KAAKF,GACLG,MAAM,KAAK,GACXC,MAAM,GAAI,GACVC,+LCET,IAAMC,EAAmC,CACrCC,OAAQ,QACRC,OAAQ,OACRC,QAAS,YACTC,KAAM,QAEJC,EAAQtD,IAAOkC,KAAVqB,IACL,SAAA9C,GAAK,OAAIE,YAAJ6C,IACMP,EAASP,EAAUjC,EAAMgD,WAoD3BC,6MA7CXC,WAAa,SAACF,GACV,MAAO,qNAAqNG,KACxNH,MAIRI,aAAe,SAACJ,GACZ,MAAO,0JAA0JG,KAC7JH,MAIRK,SAAW,SAACL,GAEJ,IAAIM,EADR,MAAqB,kBAAVN,GAGHM,EADAC,EAAKL,WAAWF,GACT3C,EAAAC,EAAAC,cAACc,EAAD,CAAMC,KAAM0B,GAAQA,GACpBO,EAAKH,aAAaJ,GAClB3C,EAAAC,EAAAC,cAACc,EAAD,CAAMC,KAAI,UAAAkC,OAAYR,IAAUA,GAEhCA,EAEJ3C,EAAAC,EAAAC,cAAA,gBAAQ+C,EAAR,MAEG,OAAVN,EACO,OAEJA,2EAGF,IAAAnB,EAC8BC,KAAK9B,MAAhCgD,EADHnB,EACGmB,MAAOjB,EADVF,EACUE,SAAU0B,EADpB5B,EACoB4B,MAEnBC,EAAM5B,KAAKuB,SAASL,GAE1B,OACI3C,EAAAC,EAAAC,cAAA,YACKwB,EAAW1B,EAAAC,EAAAC,cAACoD,EAAD,CAAmB5B,SAAUA,IAAe,KACvDA,EAAW,IAAM,KAFtB,IAE4B1B,EAAAC,EAAAC,cAACsC,EAAD,CAAOG,MAAOA,GAAQU,GAC7CD,EAAQ,IAAM,aAxCElC,8QClBjC,IAAMqC,EAAyBrE,IAAOqB,IAAViD,KA2BbC,mLAVF,IAAAjC,EACgCC,KAAK9B,MAAlC+D,EADHlC,EACGkC,eAAmB/D,EADtBQ,OAAAwB,EAAA,EAAAxB,CAAAqB,EAAA,oBAEL,OACIxB,EAAAC,EAAAC,cAACqD,EAA2B5D,EACxBK,EAAAC,EAAAC,cAAA,cAASwD,EAAiB,IAAM,aALlBxC,aCyCfyC,6MA9CXC,MAAgB,CACZC,MAAM,KAGVC,OAAS,WACLZ,EAAKa,SAAS,SAAAH,GAAK,MAAK,CACpBC,MAAOD,EAAMC,iFAIZ,IAAArC,EAC8BC,KAAK9B,MAAhCgD,EADHnB,EACGmB,MAAOjB,EADVF,EACUE,SAAU0B,EADpB5B,EACoB4B,MACrBY,EAA+B,GAC/BC,EAAsB,GAgB1B,OAfAtB,EAAMuB,QAAQ,SAACb,EAAKc,EAAGC,GACnB,IACIC,EADAC,EAAY,CAAE3B,MAAOU,GAEzB,GAAIkB,MAAMC,QAAQnB,GACdgB,EAAOrE,EAAAC,EAAAC,cAACyD,EAADxD,OAAAC,OAAA,GAAoBkE,EAApB,CAA+BlB,MAAOe,IAAMC,EAAIK,OAAS,UAC7D,GAAmB,kBAARpB,EAAkB,CAChC,IAAIqB,EAAQrB,EAAIlD,OAAOwE,KAAKtB,GAAK,IACjCY,EAAUW,KAAKF,GACfL,EAAOrE,EAAAC,EAAAC,cAAC2E,EAAD1E,OAAAC,OAAA,GAAqBkE,EAArB,CAAgClB,MAAOe,IAAMC,EAAIK,OAAS,EAAGC,MAAOA,UAE3EL,EAAOrE,EAAAC,EAAAC,cAAC4E,EAAD3E,OAAAC,OAAA,GAAwBkE,EAAxB,CAAmClB,MAAOe,IAAMC,EAAIK,OAAS,KAExET,EAAcY,KAAK5E,EAAAC,EAAAC,cAAC6E,EAAD,CAAUC,IAAKb,GAAIE,MAItCrE,EAAAC,EAAAC,cAAA,WACKwB,EAAW1B,EAAAC,EAAAC,cAACoD,EAAD,CAAmB1D,QAAS6B,KAAKqC,OAAQpC,SAAUA,IAAe,KAC7EA,EAAW,IAAM,KAClB1B,EAAAC,EAAAC,cAAC+E,EAAD,CAAiBvB,gBAAiBjC,KAAKmC,MAAMC,KAAMjE,QAAS6B,KAAKqC,SAHrE,IAGiF,IAAU,IACtFrC,KAAKmC,MAAMC,KACR7D,EAAAC,EAAAC,cAACgF,EAAD,KAAOlB,GAEPhE,EAAAC,EAAAC,cAACiF,EAAD,CAAQvF,QAAS6B,KAAKqC,QAASG,EAAUQ,OAASR,EAAUmB,KAAK,MAAQ,OAC1E,IACF,IACAhC,EAAQ,IAAM,aAzCFlC,aC0DdmE,6MArDXzB,MAAgB,CACZC,MAAM,KAGVC,OAAS,WACLZ,EAAKa,SAAS,SAAAH,GAAK,MAAK,CACpBC,MAAOD,EAAMC,6FAIA,IAAArC,EACUC,KAAK9B,MAAxB2F,EADS9D,EACT8D,KAAM5D,EADGF,EACHE,UACV4D,GAAqB,UAAb5D,IAAsBD,KAAKsC,SAAS,CAAEF,MAAM,qCAIxD,IAAIG,EAA+B,GAD9BuB,EAEqC9D,KAAK9B,MAAvCgD,EAFH4C,EAEG5C,MAAOjB,EAFV6D,EAEU7D,SAAUgD,EAFpBa,EAEoBb,MAAOtB,EAF3BmC,EAE2BnC,MAuBhC,OAtBAjD,OAAOwE,KAAKhC,GAAOuB,QAAQ,SAACsB,EAAMrB,EAAGC,GACjC,IAEIC,EAFAhB,EAAMV,EAAM6C,GACZC,EAAU7D,EAAUyB,GAExB,GAAgB,UAAZoC,EACApB,EAAOrE,EAAAC,EAAAC,cAACwF,EAAD,CAAgB/C,MAAOU,EAAc3B,SAAU8D,EAAMpC,MAAOe,IAAMC,EAAIK,OAAS,SACnF,GAAgB,WAAZgB,EAAsB,CAC7B,IAAIE,EAAWtC,EAAIlD,OAAOwE,KAAKtB,GAAK,IACpCgB,EACIrE,EAAAC,EAAAC,cAACmF,EAAD,CACI1C,MAAOU,EACP3B,SAAU8D,EACVpC,MAAOe,IAAMC,EAAIK,OAAS,EAC1BC,MAAOiB,SAIftB,EAAOrE,EAAAC,EAAAC,cAAC4E,EAAD,CAAoBnC,MAAOU,EAAK3B,SAAU8D,EAAMpC,MAAOe,IAAMC,EAAIK,OAAS,IAErFT,EAAcY,KAAK5E,EAAAC,EAAAC,cAAC6E,EAAD,CAAUC,IAAKb,GAAIE,MAItCrE,EAAAC,EAAAC,cAAA,WACKwB,EAAW1B,EAAAC,EAAAC,cAACoD,EAAD,CAAmB1D,QAAS6B,KAAKqC,OAAQpC,SAAUA,IAAe,KAC7EA,EAAW,IAAM,KAClB1B,EAAAC,EAAAC,cAAC+E,EAAD,CAAiBvB,gBAAiBjC,KAAKmC,MAAMC,KAAMjE,QAAS6B,KAAKqC,SAHrE,IAGiF,IAAU,IACtFrC,KAAKmC,MAAMC,KAAO7D,EAAAC,EAAAC,cAACgF,EAAD,KAAOlB,GAAwBhE,EAAAC,EAAAC,cAACiF,EAAD,CAAQvF,QAAS6B,KAAKqC,QAASY,GAAiB,IACjG,IACAtB,EAAQ,IAAM,aAhDDlC,qLCT9B,IAAM0E,EAAgB1G,IAAOqB,IAAVsF,KAqBJC,mLAXP,OACI9F,EAAAC,EAAAC,cAAA,OAAK6F,UAAU,OACX/F,EAAAC,EAAAC,cAAC0F,EAAD,KACI5F,EAAAC,EAAAC,cAAC2E,EAAD,CAAiBlC,MAAOqD,EAAQV,MAAM,EAAMZ,MAAM,yBAEtD1E,EAAAC,EAAAC,cAAC+F,EAAD,cAPE/E,aCJEgF,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCRvCC,IAASC,OAAOxG,EAAAC,EAAAC,cAACuG,EAAD,MAASC,SAASC,eAAe,SDsHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.6b9de9cd.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n    list-style-type: none;\n    padding: 0px;\n    margin: 0px 0px 0px 24px;\n    margin-left: 1.5em;\n\n    @media (min-width: 768px) {\n        margin-left: 2em;\n    }\n`;\n\nexport default List;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ListItem = styled.li`\n    position: relative;\n`;\n\nexport default ListItem;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Italic = styled.em`\n    ${props =>\n        props.onClick &&\n        css`\n            cursor: pointer;\n        `}\n`;\n\nexport default Italic;\n","import React from 'react';\n\nconst Link: React.SFC<React.HTMLProps<HTMLAnchorElement>> = props => <a target=\"_blank\" {...props} />;\n\nexport default Link;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Link } from './components';\n\nconst FooterWrapper = styled.div`\n    background-color: white;\n    opacity: 0.95;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n    text-align: center;\n    font-size: 12px;\n`;\n\nconst FooterContent = styled.footer`\n    padding: 8px;\n`;\n\nconst FooterText = styled.p`\n    margin-bottom: 0;\n`;\n\nclass Footer extends Component {\n    render() {\n        return (\n            <FooterWrapper>\n                <FooterContent>\n                    <FooterText>\n                        Made using <Link href=\"https://facebook.github.io/create-react-app\">Create React App</Link>. The\n                        repo is available on <Link href=\"https://github.com/jsonunger/jsonunger.github.io\">GitHub</Link>\n                        . View my resume on <Link href=\"http://bit.ly/jsonunger-resume\">Dropbox</Link>.\n                    </FooterText>\n                </FooterContent>\n            </FooterWrapper>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst PropertyComponentWrapper = styled.span`\n    font-weight: bold;\n\n    ${props =>\n        props.onClick &&\n        css`\n            cursor: pointer;\n        `}\n`;\n\ninterface IProps extends Pick<React.HTMLProps<HTMLSpanElement>, 'onClick'> {\n    property: string;\n}\n\nclass PropertyComponent extends Component<IProps> {\n    render() {\n        const { property, ...props } = this.props;\n        return <PropertyComponentWrapper {...props}>{property}</PropertyComponentWrapper>;\n    }\n}\n\nexport default PropertyComponent;\n","const getTypeOf = (obj: string | number | boolean | null) => {\n    return {}.toString\n        .call(obj)\n        .split(' ')[1]\n        .slice(0, -1)\n        .toLowerCase();\n};\n\nexport default getTypeOf;\n","import React, { Component } from 'react';\nimport { IComponentProps } from './types';\nimport PropertyComponent from './PropertyComponent';\nimport styled, { css } from 'styled-components';\nimport getTypeOf from './getTypeOf';\nimport { Link } from './components';\n\nconst colorMap: Record<string, string> = {\n    string: 'green',\n    number: 'blue',\n    boolean: 'firebrick',\n    null: 'gray',\n};\nconst Value = styled.span<{ value: PossibleValueTypes }>`\n    ${props => css`\n        color: ${colorMap[getTypeOf(props.value)]};\n    `}\n`;\n\ntype PossibleValueTypes = string | number | boolean | null;\ntype Props = IComponentProps<PossibleValueTypes>;\nclass PrimitiveComponent extends Component<Props> {\n    checkIfUrl = (value: string) => {\n        return /^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/i.test(\n            value,\n        );\n    };\n\n    checkIfEmail = (value: string) => {\n        return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i.test(\n            value,\n        );\n    };\n\n    getValue = (value: PossibleValueTypes) => {\n        if (typeof value === 'string') {\n            let node: React.ReactNode;\n            if (this.checkIfUrl(value)) {\n                node = <Link href={value}>{value}</Link>;\n            } else if (this.checkIfEmail(value)) {\n                node = <Link href={`mailto:${value}`}>{value}</Link>;\n            } else {\n                node = value;\n            }\n            return <span>\"{node}\"</span>;\n        }\n        if (value === null) {\n            return 'null';\n        }\n        return value;\n    };\n\n    render() {\n        const { value, property, comma } = this.props;\n\n        const val = this.getValue(value);\n\n        return (\n            <span>\n                {property ? <PropertyComponent property={property} /> : null}\n                {property ? ':' : null} <Value value={value}>{val}</Value>\n                {comma ? ',' : null}\n            </span>\n        );\n    }\n}\n\nexport default PrimitiveComponent;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst ToggleComponentWrapper = styled.div`\n    padding-right: 8px;\n    padding-left: 8px;\n    position: absolute;\n    top: 1px;\n    left: -1.5em;\n    cursor: pointer;\n    user-select: none;\n    -webkit-user-select: none;\n`;\n\ninterface IProps {\n    showExpandIcon: boolean;\n    onClick: React.MouseEventHandler<HTMLDivElement>;\n}\n\nclass ToggleComponent extends Component<IProps> {\n    render() {\n        const { showExpandIcon, ...props } = this.props;\n        return (\n            <ToggleComponentWrapper {...props}>\n                <strong>{showExpandIcon ? '+' : '-'}</strong>\n            </ToggleComponentWrapper>\n        );\n    }\n}\n\nexport default ToggleComponent;\n","import React, { Component, SFC } from 'react';\nimport { IComponentProps } from './types';\nimport ObjectComponent from './ObjectComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\nimport { List, ListItem, Italic } from './components';\n\ntype Props = IComponentProps<any[]>;\ninterface IState {\n    show: boolean;\n}\n\nclass ArrayComponent extends Component<Props, IState> {\n    state: IState = {\n        show: false,\n    };\n\n    toggle = () => {\n        this.setState(state => ({\n            show: !state.show,\n        }));\n    };\n\n    render() {\n        const { value, property, comma } = this.props;\n        let subComponents: JSX.Element[] = [];\n        let itemNames: string[] = [];\n        value.forEach((val, i, arr) => {\n            let compProps = { value: val },\n                comp;\n            if (Array.isArray(val)) {\n                comp = <ArrayComponent {...compProps} comma={i !== arr.length - 1} />;\n            } else if (typeof val === 'object') {\n                let title = val[Object.keys(val)[0]];\n                itemNames.push(title);\n                comp = <ObjectComponent {...compProps} comma={i !== arr.length - 1} title={title} />;\n            } else {\n                comp = <PrimitiveComponent {...compProps} comma={i !== arr.length - 1} />;\n            }\n            subComponents.push(<ListItem key={i}>{comp}</ListItem>);\n        });\n\n        return (\n            <div>\n                {property ? <PropertyComponent onClick={this.toggle} property={property} /> : null}\n                {property ? ':' : null}\n                <ToggleComponent showExpandIcon={!this.state.show} onClick={this.toggle} /> {'\\u005b'}{' '}\n                {this.state.show ? (\n                    <List>{subComponents}</List>\n                ) : (\n                    <Italic onClick={this.toggle}>{itemNames.length ? itemNames.join(', ') : '...'}</Italic>\n                )}{' '}\n                {'\\u005d'}\n                {comma ? ',' : null}\n            </div>\n        );\n    }\n}\n\nexport default ArrayComponent;\n","import React, { Component } from 'react';\nimport ArrayComponent from './ArrayComponent';\nimport PrimitiveComponent from './PrimitiveComponent';\nimport { IComponentProps } from './types';\nimport PropertyComponent from './PropertyComponent';\nimport ToggleComponent from './ToggleComponent';\nimport { List, ListItem, Italic } from './components';\nimport getTypeOf from './getTypeOf';\n\ninterface IProps extends IComponentProps<Record<string, any>> {\n    open?: boolean;\n    title?: string;\n}\ninterface IState {\n    show: boolean;\n}\n\nclass ObjectComponent extends Component<IProps, IState> {\n    state: IState = {\n        show: false,\n    };\n\n    toggle = () => {\n        this.setState(state => ({\n            show: !state.show,\n        }));\n    };\n\n    componentWillMount() {\n        const { open, property } = this.props;\n        if (open || property === 'about') this.setState({ show: true });\n    }\n\n    render() {\n        let subComponents: JSX.Element[] = [];\n        const { value, property, title, comma } = this.props;\n        Object.keys(value).forEach((prop, i, arr) => {\n            let val = value[prop];\n            let valType = getTypeOf(val);\n            let comp;\n            if (valType === 'array') {\n                comp = <ArrayComponent value={val as any[]} property={prop} comma={i !== arr.length - 1} />;\n            } else if (valType === 'object') {\n                let objTitle = val[Object.keys(val)[0]];\n                comp = (\n                    <ObjectComponent\n                        value={val as IProps['value']}\n                        property={prop}\n                        comma={i !== arr.length - 1}\n                        title={objTitle}\n                    />\n                );\n            } else {\n                comp = <PrimitiveComponent value={val} property={prop} comma={i !== arr.length - 1} />;\n            }\n            subComponents.push(<ListItem key={i}>{comp}</ListItem>);\n        });\n\n        return (\n            <div>\n                {property ? <PropertyComponent onClick={this.toggle} property={property} /> : null}\n                {property ? ':' : null}\n                <ToggleComponent showExpandIcon={!this.state.show} onClick={this.toggle} /> {'\\u007b'}{' '}\n                {this.state.show ? <List>{subComponents}</List> : <Italic onClick={this.toggle}>{title}</Italic>}{' '}\n                {'\\u007d'}\n                {comma ? ',' : null}\n            </div>\n        );\n    }\n}\n\nexport default ObjectComponent;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Footer from './Footer';\nimport ObjectComponent from './ObjectComponent';\n\nimport resume from './resume.json';\n\nconst ResumeWrapper = styled.div`\n    margin: 8px;\n\n    @media (max-width: 767px) {\n        margin-right: 12px;\n    }\n`;\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <ResumeWrapper>\n                    <ObjectComponent value={resume} open={true} title=\"Jason's JSON Resume\" />\n                </ResumeWrapper>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface IConfig {\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import 'react-app-polyfill/ie9';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}